// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"os"

	"github.com/nicholas-fedor/touch/internal/filesystem"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFS creates a new instance of MockFS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFS(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFS {
	mock := &MockFS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFS is an autogenerated mock type for the FS type
type MockFS struct {
	mock.Mock
}

type MockFS_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFS) EXPECT() *MockFS_Expecter {
	return &MockFS_Expecter{mock: &_m.Mock}
}

// Chtimes provides a mock function for the type MockFS
func (_mock *MockFS) Chtimes(path string, atime filesystem.Time, mtime filesystem.Time) error {
	ret := _mock.Called(path, atime, mtime)

	if len(ret) == 0 {
		panic("no return value specified for Chtimes")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, filesystem.Time, filesystem.Time) error); ok {
		r0 = returnFunc(path, atime, mtime)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFS_Chtimes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chtimes'
type MockFS_Chtimes_Call struct {
	*mock.Call
}

// Chtimes is a helper method to define mock.On call
//   - path string
//   - atime filesystem.Time
//   - mtime filesystem.Time
func (_e *MockFS_Expecter) Chtimes(path interface{}, atime interface{}, mtime interface{}) *MockFS_Chtimes_Call {
	return &MockFS_Chtimes_Call{Call: _e.mock.On("Chtimes", path, atime, mtime)}
}

func (_c *MockFS_Chtimes_Call) Run(run func(path string, atime filesystem.Time, mtime filesystem.Time)) *MockFS_Chtimes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 filesystem.Time
		if args[1] != nil {
			arg1 = args[1].(filesystem.Time)
		}
		var arg2 filesystem.Time
		if args[2] != nil {
			arg2 = args[2].(filesystem.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFS_Chtimes_Call) Return(err error) *MockFS_Chtimes_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFS_Chtimes_Call) RunAndReturn(run func(path string, atime filesystem.Time, mtime filesystem.Time) error) *MockFS_Chtimes_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockFS
func (_mock *MockFS) Create(path string) (*os.File, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *os.File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*os.File, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFS_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFS_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - path string
func (_e *MockFS_Expecter) Create(path interface{}) *MockFS_Create_Call {
	return &MockFS_Create_Call{Call: _e.mock.On("Create", path)}
}

func (_c *MockFS_Create_Call) Run(run func(path string)) *MockFS_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFS_Create_Call) Return(file *os.File, err error) *MockFS_Create_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *MockFS_Create_Call) RunAndReturn(run func(path string) (*os.File, error)) *MockFS_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Lstat provides a mock function for the type MockFS
func (_mock *MockFS) Lstat(path string) (os.FileInfo, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Lstat")
	}

	var r0 os.FileInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (os.FileInfo, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) os.FileInfo); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(os.FileInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFS_Lstat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lstat'
type MockFS_Lstat_Call struct {
	*mock.Call
}

// Lstat is a helper method to define mock.On call
//   - path string
func (_e *MockFS_Expecter) Lstat(path interface{}) *MockFS_Lstat_Call {
	return &MockFS_Lstat_Call{Call: _e.mock.On("Lstat", path)}
}

func (_c *MockFS_Lstat_Call) Run(run func(path string)) *MockFS_Lstat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFS_Lstat_Call) Return(info os.FileInfo, err error) *MockFS_Lstat_Call {
	_c.Call.Return(info, err)
	return _c
}

func (_c *MockFS_Lstat_Call) RunAndReturn(run func(path string) (os.FileInfo, error)) *MockFS_Lstat_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function for the type MockFS
func (_mock *MockFS) Stat(path string) (os.FileInfo, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 os.FileInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (os.FileInfo, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) os.FileInfo); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(os.FileInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFS_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type MockFS_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - path string
func (_e *MockFS_Expecter) Stat(path interface{}) *MockFS_Stat_Call {
	return &MockFS_Stat_Call{Call: _e.mock.On("Stat", path)}
}

func (_c *MockFS_Stat_Call) Run(run func(path string)) *MockFS_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFS_Stat_Call) Return(info os.FileInfo, err error) *MockFS_Stat_Call {
	_c.Call.Return(info, err)
	return _c
}

func (_c *MockFS_Stat_Call) RunAndReturn(run func(path string) (os.FileInfo, error)) *MockFS_Stat_Call {
	_c.Call.Return(run)
	return _c
}
